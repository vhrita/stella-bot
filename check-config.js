import 'dotenv/config';
import { isLocalAIOnline, getAvailableModels } from './src/core/local-ai.js';
import { logger } from './src/core/logger.js';

async function checkConfiguration() {
  logger.log('üîç Verificando configura√ß√£o do Stella Bot...\n');

  // Verificar vari√°veis essenciais
  const requiredVars = ['DISCORD_TOKEN', 'DISCORD_APP_ID'];
  const missingVars = requiredVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    logger.error(`‚ùå Vari√°veis obrigat√≥rias faltando: ${missingVars.join(', ')}`);
    process.exit(1);
  }

  logger.log('‚úÖ Vari√°veis do Discord configuradas');

  // Verificar N8N (fallback)
  const n8nVars = ['N8N_IMAGINE_URL', 'N8N_USERNAME', 'N8N_PASSWORD'];
  const hasN8N = n8nVars.every(varName => process.env[varName]);
  
  if (hasN8N) {
    logger.log('‚úÖ N8N configurado (fallback dispon√≠vel)');
  } else {
    logger.log('‚ö†Ô∏è  N8N n√£o configurado (sem fallback)');
  }

  // Verificar Local AI
  const localAIUrl = process.env.LOCAL_AI_URL;
  if (localAIUrl) {
    logger.log(`üîç Verificando servi√ßo local: ${localAIUrl}`);
    
    const isOnline = await isLocalAIOnline();
    if (isOnline) {
      logger.log('‚úÖ Servi√ßo local online');
      
      try {
        const models = await getAvailableModels();
        const availableModels = models.filter(m => m.available);
        
        if (availableModels.length > 0) {
          logger.log(`‚úÖ ${availableModels.length} modelo(s) dispon√≠vel(is):`);
          availableModels.forEach(model => {
            logger.log(`  - ${model.name} (${model.resolution}, ${model.memory_usage})`);
          });
        } else {
          logger.log('‚ö†Ô∏è  Servi√ßo online mas nenhum modelo dispon√≠vel');
        }
      } catch (error) {
        logger.error('‚ùå Erro ao buscar modelos:', error);
      }
    } else {
      logger.log('‚ùå Servi√ßo local offline');
    }
  } else {
    logger.log('‚ö†Ô∏è  LOCAL_AI_URL n√£o configurada');
  }

  // Verificar configura√ß√µes opcionais
  const restrictChannel = process.env.RESTRICT_TO_CHANNEL_ID;
  if (restrictChannel) {
    logger.log(`üîí Bot restrito ao canal: ${restrictChannel}`);
  }

  const superUsers = process.env.SUPER_USERS;
  if (superUsers) {
    const userCount = superUsers.split(',').length;
    logger.log(`üëë ${userCount} super user(s) configurado(s)`);
  }

  logger.log('\nüéâ Verifica√ß√£o completa! O Stella Bot est√° pronto para brilhar.');
}

checkConfiguration().catch(error => {
  logger.error('Erro na verifica√ß√£o:', error);
  process.exit(1);
});
